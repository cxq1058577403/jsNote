1. 在HTML中使用javaScript
1.1 <script>元素
     1. 无论如何包含代码，只要不存在defer（脚本会被延迟到整个页面都解析完毕后再运行，相当于告诉浏览器立即下载，但延迟执行）和async属性（
     和上一个属性一样，它只适用于外部脚本，它不能保证按照指定的先后顺序执行），浏览器都会按照</script>元素在页面中的出现的先后顺序对它们依次进行解析。换句话说，依次按照
     第一个/第二个等的顺序依次执行<script> 中的代码。
     2. 一般会将<script>代码放置在<body>中，让人感觉上打开页面的速度变快了 
     3. js中在function中使用var定义的变量是局部变量，而不使用var定义的变量是全局变量
1.2 数据类型
     1. js中有5种简单类型，Undefined,Null,Boolean,Number,String,和一种复杂数据类型Object，它是由一组无序的名值对构成。
     2. typeof操作符，返回相应的类型。特殊情况，typeof null返回的结果是Object，因为特殊值null被认为是一个空的对象引用
     3. Undefined只有一个值undefined，当使用var变量声明一个变量但是没有对其赋值时，变量的默认值就是这个。一般一般情况下，不存在
     将一个变量显示声明为undefined的情况，它主要用来区分空对象指针与未经初始化的变量。
     4. Null类型也是只有一个值null，它表示一个空的对象指针。实际上undefined的值是派生自null的值。
     5. 在任何情况下，都没必要将一个变量显示的声明为undefined，但只要意在保存对象的变量但还没有真正保存对象之前，就应该明确的让该变量
     保存为null值。
     6. Boolean（）函数总会返回一个boolean值
     7. js中的String和Java中的String有相似特点，字符串一旦创建，它们的值就不能改变。
     8. label语句，如：
         start：for(var i=;i<count;i++){
          alert(i);
         }
       上述定义的start标签可以在将来由break和continue语句调用。加标签的语句一般要和for语句等循环语句配合使用。
      9. js中不介意传递进来多少个参数，也不介意传递进来的参数的类型。即如果函数只定义了两个参数，但在调用的时候可以传递一个/两个/三个甚至
      零个参数。因为参数在内部都是用数组来存储的。函数接收到的始终是个数组，而不关系数组中包含哪些元素。因此可以使用atguments[0]的方式来
      访问实际的参数。其中fn.length获取到的是形参的个数，而arguments.length获取到的是实际传递进来的实参的个数。关于argument，那就是它的值永远与对应命名参数的值
      保持同步，如：
      function add(num1,num2){
          arguments[1]=10;
          alert(arguments[0]+num2);
     }
     上述函数在每次执行的时候，都会先将第二个参数的值设置为10，，此时修改了arguments[1]的值，也就相当于修改了num2的值，因为它们两个是
     保持同步的。但这两个值得内存空间是不同的，只是它们的值会保持同步。但这种影响是单向的，修改命名参数的值不会改变arguments中对应的值。
     重要的一点是，如果只传入了一个参数，那么修改arguments[1]的值不会反映到命名参数中。这是因为arguments对象的长度是由传入的参数决定的，
     不是由定义时的命名参数的个数决定的。
     但在严格模式下，对arguments[1]的修改不会影响num2的值。
     参数都是值传递，不可能通过引用传递参数。
     10. js中的函数没有签名一说，所以不能在js中采用java的方式实现函数重载。可以在函数中通过检查函数传入的参数，模拟函数的重载。
